<?php

declare(strict_types = 1);

namespace App\CodeParser;

use PhpParser\BuilderFactory;
use PhpParser\PrettyPrinter;
use PhpParser\Node;
use App\Entity\Collection;
use PhpParser\PrettyPrinterAbstract;

/**
 * Builds Cest-Files for various sources.
 * 
 * @author Gerald Baumeister <gerald.b@whosonlocation.com>
 * @package Fantestic
 */
class CestBuilder
{
    private string $cestsNamespace;
    private BuilderFactory $factory;
    private Node $classNode;
    /**
     * @var Node[]
     */
    private array $methods = [];

    public function __construct(string $cestsNamespace) {
        $this->cestsNamespace = $cestsNamespace;
        $this->factory = new BuilderFactory;
    }

    public function createClassFromCollection(Collection $collection) :CestWrapper
    {
        $class = $this->factory->class($collection->getClassName())
            ->setDocComment($this->getClassDocComment());
        // @todo add declare(strict_types=1); (PhpParser\Node\DeclareDeclare)
        $classNode = $this->factory->namespace($this->cestsNamespace)
            ->addStmt($this->factory->use('AcceptanceTester'))
            ->addStmt($class);
        return new CestWrapper($this->builderFactory);
    }

    public function addMethod($methodName) :self
    {
        $this['methods'] = $this->factory->method($methodName)
            ->makePublic()
            ->setReturnType('void')
            ->addParam($this->factory->param('$I')->setType('AcceptanceTester'))
            ->setDocComment($this->getMethodComment());
        return $this;
    }

    private function getClassDocComment()
    {
        return '/**
        * Buildception Cest generated by Fantestic.
        *
        * Feel free to add custom tests, any tests that do not have a 
        * @Fantestic annotation will be ignored by Fantestic.
        * 
        * @author Fantestic
        */';
    }
}
